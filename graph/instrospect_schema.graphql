schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}
scalar smallint
scalar timestamptz
scalar uuid
"mutation root"
type mutation_root {
  """
  delete data from the table: "things"
  """
  delete_things(
    "filter the rows which have to be deleted"
    where: things_bool_exp!
  ): things_mutation_response
  """
  delete single row from the table: "things"
  """
  delete_things_by_pk(id: uuid!): things
  """
  delete data from the table: "trollies"
  """
  delete_trollies(
    "filter the rows which have to be deleted"
    where: trollies_bool_exp!
  ): trollies_mutation_response
  """
  delete single row from the table: "trollies"
  """
  delete_trollies_by_pk(id: uuid!): trollies
  """
  insert data into the table: "things"
  """
  insert_things(
    "the rows to be inserted"
    objects: [things_insert_input!]!,
    "upsert condition"
    on_conflict: things_on_conflict
  ): things_mutation_response
  """
  insert a single row into the table: "things"
  """
  insert_things_one(
    "the row to be inserted"
    object: things_insert_input!,
    "upsert condition"
    on_conflict: things_on_conflict
  ): things
  """
  insert data into the table: "trollies"
  """
  insert_trollies(
    "the rows to be inserted"
    objects: [trollies_insert_input!]!,
    "upsert condition"
    on_conflict: trollies_on_conflict
  ): trollies_mutation_response
  """
  insert a single row into the table: "trollies"
  """
  insert_trollies_one(
    "the row to be inserted"
    object: trollies_insert_input!,
    "upsert condition"
    on_conflict: trollies_on_conflict
  ): trollies
  """
  update data of the table: "things"
  """
  update_things(
    "increments the numeric columns with given value of the filtered values"
    _inc: things_inc_input,
    "sets the columns of the filtered rows to the given values"
    _set: things_set_input,
    "filter the rows which have to be updated"
    where: things_bool_exp!
  ): things_mutation_response
  """
  update single row of the table: "things"
  """
  update_things_by_pk(
    "increments the numeric columns with given value of the filtered values"
    _inc: things_inc_input,
    "sets the columns of the filtered rows to the given values"
    _set: things_set_input,pk_columns: things_pk_columns_input!  ): things
  """
  update multiples rows of table: "things"
  """
  update_things_many(
    "updates to execute, in order"
    updates: [things_updates!]!
  ): [things_mutation_response]
  """
  update data of the table: "trollies"
  """
  update_trollies(
    "sets the columns of the filtered rows to the given values"
    _set: trollies_set_input,
    "filter the rows which have to be updated"
    where: trollies_bool_exp!
  ): trollies_mutation_response
  """
  update single row of the table: "trollies"
  """
  update_trollies_by_pk(
    "sets the columns of the filtered rows to the given values"
    _set: trollies_set_input,pk_columns: trollies_pk_columns_input!  ): trollies
  """
  update multiples rows of table: "trollies"
  """
  update_trollies_many(
    "updates to execute, in order"
    updates: [trollies_updates!]!
  ): [trollies_mutation_response]
}
type query_root {
  """
  fetch data from the table: "things"
  """
  things(
    "distinct select on columns"
    distinct_on: [things_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [things_order_by!],
    "filter the rows returned"
    where: things_bool_exp
  ): [things!]!
  """
  fetch aggregated fields from the table: "things"
  """
  things_aggregate(
    "distinct select on columns"
    distinct_on: [things_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [things_order_by!],
    "filter the rows returned"
    where: things_bool_exp
  ): things_aggregate!
  """
  fetch data from the table: "things" using primary key columns
  """
  things_by_pk(id: uuid!): things
  """
  fetch data from the table: "trollies"
  """
  trollies(
    "distinct select on columns"
    distinct_on: [trollies_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [trollies_order_by!],
    "filter the rows returned"
    where: trollies_bool_exp
  ): [trollies!]!
  """
  fetch aggregated fields from the table: "trollies"
  """
  trollies_aggregate(
    "distinct select on columns"
    distinct_on: [trollies_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [trollies_order_by!],
    "filter the rows returned"
    where: trollies_bool_exp
  ): trollies_aggregate!
  """
  fetch data from the table: "trollies" using primary key columns
  """
  trollies_by_pk(id: uuid!): trollies
}
type subscription_root {
  """
  fetch data from the table: "things"
  """
  things(
    "distinct select on columns"
    distinct_on: [things_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [things_order_by!],
    "filter the rows returned"
    where: things_bool_exp
  ): [things!]!
  """
  fetch aggregated fields from the table: "things"
  """
  things_aggregate(
    "distinct select on columns"
    distinct_on: [things_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [things_order_by!],
    "filter the rows returned"
    where: things_bool_exp
  ): things_aggregate!
  """
  fetch data from the table: "things" using primary key columns
  """
  things_by_pk(id: uuid!): things
  """
  fetch data from the table in a streaming manner: "things"
  """
  things_stream(
    "maximum number of rows returned in a single batch"
    batch_size: Int!,
    "cursor to stream the results returned by the query"
    cursor: [things_stream_cursor_input]!,
    "filter the rows returned"
    where: things_bool_exp
  ): [things!]!
  """
  fetch data from the table: "trollies"
  """
  trollies(
    "distinct select on columns"
    distinct_on: [trollies_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [trollies_order_by!],
    "filter the rows returned"
    where: trollies_bool_exp
  ): [trollies!]!
  """
  fetch aggregated fields from the table: "trollies"
  """
  trollies_aggregate(
    "distinct select on columns"
    distinct_on: [trollies_select_column!],
    "limit the number of rows returned"
    limit: Int,
    "skip the first n rows. Use only with order_by"
    offset: Int,
    "sort the rows by one or more columns"
    order_by: [trollies_order_by!],
    "filter the rows returned"
    where: trollies_bool_exp
  ): trollies_aggregate!
  """
  fetch data from the table: "trollies" using primary key columns
  """
  trollies_by_pk(id: uuid!): trollies
  """
  fetch data from the table in a streaming manner: "trollies"
  """
  trollies_stream(
    "maximum number of rows returned in a single batch"
    batch_size: Int!,
    "cursor to stream the results returned by the query"
    cursor: [trollies_stream_cursor_input]!,
    "filter the rows returned"
    where: trollies_bool_exp
  ): [trollies!]!
}
"""
columns and relationships of "things"
"""
type things {
  amount: smallint
  created: timestamptz!
  id: uuid!
  name: String
}
"""
aggregated selection of "things"
"""
type things_aggregate {
  aggregate: things_aggregate_fields
  nodes: [things!]!
}
"""
aggregate fields of "things"
"""
type things_aggregate_fields {
  avg: things_avg_fields
  count(columns: [things_select_column!], distinct: Boolean): Int!
  max: things_max_fields
  min: things_min_fields
  stddev: things_stddev_fields
  stddev_pop: things_stddev_pop_fields
  stddev_samp: things_stddev_samp_fields
  sum: things_sum_fields
  var_pop: things_var_pop_fields
  var_samp: things_var_samp_fields
  variance: things_variance_fields
}
"aggregate avg on columns"
type things_avg_fields {
  amount: Float
}
"aggregate max on columns"
type things_max_fields {
  amount: smallint
  created: timestamptz
  id: uuid
  name: String
}
"aggregate min on columns"
type things_min_fields {
  amount: smallint
  created: timestamptz
  id: uuid
  name: String
}
"""
response of any mutation on the table "things"
"""
type things_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [things!]!
}
"aggregate stddev on columns"
type things_stddev_fields {
  amount: Float
}
"aggregate stddev_pop on columns"
type things_stddev_pop_fields {
  amount: Float
}
"aggregate stddev_samp on columns"
type things_stddev_samp_fields {
  amount: Float
}
"aggregate sum on columns"
type things_sum_fields {
  amount: smallint
}
"aggregate var_pop on columns"
type things_var_pop_fields {
  amount: Float
}
"aggregate var_samp on columns"
type things_var_samp_fields {
  amount: Float
}
"aggregate variance on columns"
type things_variance_fields {
  amount: Float
}
"""
columns and relationships of "trollies"
"""
type trollies {
  id: uuid!
  number: String
  "An object relationship"
  thing: things
  thing_id: uuid
}
"""
aggregated selection of "trollies"
"""
type trollies_aggregate {
  aggregate: trollies_aggregate_fields
  nodes: [trollies!]!
}
"""
aggregate fields of "trollies"
"""
type trollies_aggregate_fields {
  count(columns: [trollies_select_column!], distinct: Boolean): Int!
  max: trollies_max_fields
  min: trollies_min_fields
}
"aggregate max on columns"
type trollies_max_fields {
  id: uuid
  number: String
  thing_id: uuid
}
"aggregate min on columns"
type trollies_min_fields {
  id: uuid
  number: String
  thing_id: uuid
}
"""
response of any mutation on the table "trollies"
"""
type trollies_mutation_response {
  "number of rows affected by the mutation"
  affected_rows: Int!
  "data from the rows affected by the mutation"
  returning: [trollies!]!
}
"ordering argument of a cursor"
enum cursor_ordering {
  "ascending ordering of the cursor"
  ASC
  "descending ordering of the cursor"
  DESC
}
"column ordering options"
enum order_by {
  "in ascending order, nulls last"
  asc
  "in ascending order, nulls first"
  asc_nulls_first
  "in ascending order, nulls last"
  asc_nulls_last
  "in descending order, nulls first"
  desc
  "in descending order, nulls first"
  desc_nulls_first
  "in descending order, nulls last"
  desc_nulls_last
}
"""
unique or primary key constraints on table "things"
"""
enum things_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  things_pkey
}
"""
select columns of table "things"
"""
enum things_select_column {
  "column name"
  amount
  "column name"
  created
  "column name"
  id
  "column name"
  name
}
"""
update columns of table "things"
"""
enum things_update_column {
  "column name"
  amount
  "column name"
  created
  "column name"
  id
  "column name"
  name
}
"""
unique or primary key constraints on table "trollies"
"""
enum trollies_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  trollies_pkey
}
"""
select columns of table "trollies"
"""
enum trollies_select_column {
  "column name"
  id
  "column name"
  number
  "column name"
  thing_id
}
"""
update columns of table "trollies"
"""
enum trollies_update_column {
  "column name"
  id
  "column name"
  number
  "column name"
  thing_id
}
"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  "does the column match the given case-insensitive pattern"
  _ilike: String
  _in: [String!]
  "does the column match the given POSIX regular expression, case insensitive"
  _iregex: String
  _is_null: Boolean
  "does the column match the given pattern"
  _like: String
  _lt: String
  _lte: String
  _neq: String
  "does the column NOT match the given case-insensitive pattern"
  _nilike: String
  _nin: [String!]
  "does the column NOT match the given POSIX regular expression, case insensitive"
  _niregex: String
  "does the column NOT match the given pattern"
  _nlike: String
  "does the column NOT match the given POSIX regular expression, case sensitive"
  _nregex: String
  "does the column NOT match the given SQL regular expression"
  _nsimilar: String
  "does the column match the given POSIX regular expression, case sensitive"
  _regex: String
  "does the column match the given SQL regular expression"
  _similar: String
}
"""
Boolean expression to compare columns of type "smallint". All fields are combined with logical 'AND'.
"""
input smallint_comparison_exp {
  _eq: smallint
  _gt: smallint
  _gte: smallint
  _in: [smallint!]
  _is_null: Boolean
  _lt: smallint
  _lte: smallint
  _neq: smallint
  _nin: [smallint!]
}
"""
Boolean expression to filter rows from the table "things". All fields are combined with a logical 'AND'.
"""
input things_bool_exp {
  _and: [things_bool_exp!]
  _not: things_bool_exp
  _or: [things_bool_exp!]
  amount: smallint_comparison_exp
  created: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
}
"""
input type for incrementing numeric columns in table "things"
"""
input things_inc_input {
  amount: smallint
}
"""
input type for inserting data into table "things"
"""
input things_insert_input {
  amount: smallint
  created: timestamptz
  id: uuid
  name: String
}
"""
input type for inserting object relation for remote table "things"
"""
input things_obj_rel_insert_input {
  data: things_insert_input!
  "upsert condition"
  on_conflict: things_on_conflict
}
"""
on_conflict condition type for table "things"
"""
input things_on_conflict {
  constraint: things_constraint!
  update_columns: [things_update_column!]! = []
  where: things_bool_exp
}
"""
Ordering options when selecting data from "things".
"""
input things_order_by {
  amount: order_by
  created: order_by
  id: order_by
  name: order_by
}
"primary key columns input for table: things"
input things_pk_columns_input {
  id: uuid!
}
"""
input type for updating data in table "things"
"""
input things_set_input {
  amount: smallint
  created: timestamptz
  id: uuid
  name: String
}
"""
Streaming cursor of the table "things"
"""
input things_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: things_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}
"Initial value of the column from where the streaming should start"
input things_stream_cursor_value_input {
  amount: smallint
  created: timestamptz
  id: uuid
  name: String
}
input things_updates {
  "increments the numeric columns with given value of the filtered values"
  _inc: things_inc_input
  "sets the columns of the filtered rows to the given values"
  _set: things_set_input
  "filter the rows which have to be updated"
  where: things_bool_exp!
}
"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
"""
Boolean expression to filter rows from the table "trollies". All fields are combined with a logical 'AND'.
"""
input trollies_bool_exp {
  _and: [trollies_bool_exp!]
  _not: trollies_bool_exp
  _or: [trollies_bool_exp!]
  id: uuid_comparison_exp
  number: String_comparison_exp
  thing: things_bool_exp
  thing_id: uuid_comparison_exp
}
"""
input type for inserting data into table "trollies"
"""
input trollies_insert_input {
  id: uuid
  number: String
  thing: things_obj_rel_insert_input
  thing_id: uuid
}
"""
on_conflict condition type for table "trollies"
"""
input trollies_on_conflict {
  constraint: trollies_constraint!
  update_columns: [trollies_update_column!]! = []
  where: trollies_bool_exp
}
"""
Ordering options when selecting data from "trollies".
"""
input trollies_order_by {
  id: order_by
  number: order_by
  thing: things_order_by
  thing_id: order_by
}
"primary key columns input for table: trollies"
input trollies_pk_columns_input {
  id: uuid!
}
"""
input type for updating data in table "trollies"
"""
input trollies_set_input {
  id: uuid
  number: String
  thing_id: uuid
}
"""
Streaming cursor of the table "trollies"
"""
input trollies_stream_cursor_input {
  "Stream column input with initial value"
  initial_value: trollies_stream_cursor_value_input!
  "cursor ordering"
  ordering: cursor_ordering
}
"Initial value of the column from where the streaming should start"
input trollies_stream_cursor_value_input {
  id: uuid
  number: String
  thing_id: uuid
}
input trollies_updates {
  "sets the columns of the filtered rows to the given values"
  _set: trollies_set_input
  "filter the rows which have to be updated"
  where: trollies_bool_exp!
}
"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "measured in seconds"
    ttl: Int! = 60,
    "refresh the cache entry"
    refresh: Boolean! = false
  ) on QUERY

